# shellcheck shell=bash

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
DOTFILES_DIR="$(readlink -f "$SCRIPT_DIR/../../")"
unset SCRIPT_DIR

# Zsh options ----------------------------------------------

setopt ALWAYS_TO_END           # Move cursor to end after completion
setopt APPEND_HISTORY          # Append rather than overwrite history file
setopt AUTO_CD
setopt COMPLETE_IN_WORD        # Allow completion in middle of words
setopt CORRECT                 # Command correction suggestions
setopt NO_BEEP
setopt NO_CASE_GLOB
setopt PROMPT_SUBST            # Expand PROMPT and RPROMPT

autoload -Uz colors && colors  # Enable ZSH color names
autoload -Uz vcs_info          # Enable ZSH VCS info

# Common setup ---------------------------------------------

source "$DOTFILES_DIR/shell/common/path.sh"
source "$DOTFILES_DIR/shell/common/exports.sh"
source "$DOTFILES_DIR/shell/common/aliases.sh"
source "$DOTFILES_DIR/shell/common/functions.sh"

# Completion ---------------------------------------------------------

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'  # No case
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}" # Colors
zstyle ':completion:*' menu select                      # Menu

# Homebrew completions
if command -v brew >/dev/null; then
    if [[ -d $(brew --prefix)/share/zsh-completions ]]; then
        fpath+="$(brew --prefix)/share/zsh-completions"
    fi
    if [[ -d $(brew --prefix)/share/zsh/site-functions ]]; then
        fpath+="$(brew --prefix)/share/zsh/site-functions"
    fi
fi

# Local completions from, e.g., Typer
if [[ -d $HOME/.zfunc ]]; then
    fpath=(~/.zfunc $fpath)
fi

autoload -Uz compinit && compinit  # Completion
autoload -Uz bashcompinit && bashcompinit  # Incorporate Bash, too

# Common tools ---------------------------------------------

source "$DOTFILES_DIR/shell/common/tools.sh"

# Keybindings --------------------------------------------------------

# Emacs bindings
bindkey -e

# macOS-like customizations
bindkey "^A" beginning-of-line       # Ctrl+A
bindkey "^E" end-of-line             # Ctrl+E
bindkey "^[[1;3D" backward-word      # Option+Left
bindkey "^[[1;3C" forward-word       # Option+Right
bindkey "^[[1;9D" beginning-of-line  # Cmd+Left
bindkey "^[[1;9C" end-of-line        # Cmd+Right
bindkey "^[[3~" delete-char          # Delete
bindkey "^H" backward-delete-char    # Backspace
bindkey "^[[3;3~" backward-kill-word # Option+Backspace
bindkey "^[[3;9~" kill-word          # Option+Delete
bindkey "^U" backward-kill-line      # Cmd+Backspace
bindkey "^K" kill-line               # Cmd+Delete

# Search history
bindkey "^R" history-incremental-search-backward
bindkey "^S" history-incremental-search-forward

# Arrow key history (with prefix matching)
autoload -U up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search    # Up arrow
bindkey "^[[B" down-line-or-beginning-search  # Down arrow

# History configuration ----------------------------------------------

setopt EXTENDED_HISTORY         # Save timestamp and duration
setopt HIST_EXPIRE_DUPS_FIRST   # Expire duplicates first when trimming history
setopt HIST_IGNORE_ALL_DUPS     # Remove older duplicate when new one added
setopt HIST_IGNORE_SPACE        # Don't save commands starting with space
setopt HIST_REDUCE_BLANKS       # Remove extra whitespace before saving
setopt HIST_SAVE_NO_DUPS        # Don't write duplicate commands
setopt HIST_VERIFY              # Show expanded history command before executing
setopt INC_APPEND_HISTORY_TIME  # Write commands immediately w/timestamps
setopt SHARE_HISTORY            # Share history between all zsh sessions

HISTFILE="$HOME/.zsh_history"
HISTSIZE=100000  # 100,000 commands in memory
SAVEHIST=500000  # 500,000 commands on disk

# Prompt ---------------------------------------------------

# Configure VCS display
zstyle ':vcs_info:*' enable                 # Enable for everything
zstyle ':vcs_info:*' check-for-changes true # Allow checking for repo changes
zstyle ':vcs_info:*' stagedstr "+"          # Plus sign if any staged changes
zstyle ':vcs_info:*' unstagedstr "*"        # Asterisk if any unstaged changes
zstyle ':vcs_info:*' formats "%{$fg[magenta]%}%b%u%c%{$reset_color%}"

precmd() { vcs_info }
PROMPT=$'${TRS_PS1_LABEL:+"$TRS_PS1_LABEL "}%{$fg[blue]%}%2~%{$reset_color%} %(!.#.$) '
RPROMPT='$vcs_info_msg_0_'
